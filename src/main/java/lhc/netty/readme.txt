Reactor模式的角色构成：

1，Handle(句柄或是文件描述符号)：本质上表示一种资源，是由操作系统提供的；该资源表示一个一个的事件，比如说文件描述符，或是针对网络编程中socket描述
符。事件既可以来自于外部，也可以来自于内部。外部事件比如说客户端的连接请求，客户端发送过来的数据等，内部事件比如说操作系统产生的定时器事件等。
他本质上是一个文件描述符

2，synchronous event demultiplexer(同步事件分离器)：它本身是一个系统调用，用于等待事件的发生（事件可能是一个也可能是多个）。调用方在调用
的时候会被阻塞，一直阻塞到同步事件分离器上有事件产生为止。对于linux来说，同步事件分离器指的就是常用的I/O 多路复用机制，比如说select，poll，epoll
在nio中同步事件分离器对应的组件就是selector，对应的阻塞方法就是select

3，event handler（事件处理器）：本身由多个回调方法构成，这些回调方法构成了与应用相关的对于某个方法的反馈机制，netty相比于nio来说，在事件处理器这个角色进行
了一个升级，它为我们开发者提供了大量的回调方法，供我们在特定事件产生时实现对应的方法进行业务逻辑处理。

4，concrete event handler（具体事件处理器）：是事件处理器的实现，它本身实现了事件处理器所提供的各个方法的回调，从而实现了特定于业务的逻辑它
本质上就是我们所编写的一个个处理器的实现

5，Initiation dispatcher（初始分发器）：实际上就是reactor角色。它本质定义了一些规范，这些规范用于控制事件的调度方式，同时又提供了事件处理器的
注册，删除等设施。它本身是整个事件处理器的核心所在，Initiation dispatcher 会通过同步事件分离器来等待事件的发生。
一旦事件发生，Initiation dispatcher首先会分离每一个事件，然后调用事件处理器，最后调用相关的回调方法处理这些事件